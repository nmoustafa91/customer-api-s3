openapi: 3.0.0
info:
  description: "Customers API offers CRUD operations on managing customers with their assigned contracts."
  version: "0.2.0"
  title: "Customers API"

servers:
  - url: http://localhost:8080

paths:

  /customers:
    get:
      tags:
        - "Customers"
      summary: "Get filtered customers list"
      description: "Get filtered customers list"
      operationId: getCustomers
      parameters:
        - $ref: '#/components/parameters/CustomerFirstNameQueryParam'
        - $ref: '#/components/parameters/CustomerLastNameQueryParam'
        - $ref: '#/components/parameters/CustomerIdsQueryParam'
        - $ref: '#/components/parameters/CustomerCityQueryParam'
        - $ref: '#/components/parameters/CompanyNameQueryParam'
        - $ref: '#/components/parameters/ProductNumberQueryParam'
        - $ref: '#/components/parameters/CustomerSearchQueryParam'
        - $ref: '#/components/parameters/PageNumberQueryParam'
        - $ref: '#/components/parameters/PageSizeQueryParam'
        - $ref: '#/components/parameters/SortQueryParam'
      responses:
        "200":
          $ref: '#/components/responses/ListCustomersResponse'
    post:
      tags:
        - "Customers"
      summary: "Create a new customer"
      description: "Create a new customer"
      operationId: createCustomer
      requestBody:
        $ref: "#/components/requestBodies/CreateCustomerBody"
      responses:
        "201":
          $ref: '#/components/responses/CreateCustomerResponse'
        "400":
          description: "Invalid data supplied"
  /customers/all-customers:
    get:
      tags:
        - "Customers"
      summary: "Get all customers"
      description: "Get all customers"
      operationId: getAllCustomers
      parameters:
        - $ref: '#/components/parameters/PageNumberQueryParam'
        - $ref: '#/components/parameters/PageSizeQueryParam'
        - $ref: '#/components/parameters/SortQueryParam'
      responses:
        "200":
          $ref: '#/components/responses/ListCustomersResponse'

  /customers/{customerId}:
    parameters:
      - $ref: "#/components/parameters/CustomerIdPathParam"
    get:
      tags:
        - "Customers"
      summary: "Get customer"
      description: "Get existing customer"
      operationId: getCustomer
      responses:
        "200":
          $ref: '#/components/responses/GetCustomerResponse'
        "404":
          description: "Customer not found"
    put:
      tags:
        - "Customers"
      summary: "Update a customer"
      description: "Update existing customer"
      operationId: updateCustomer
      parameters:
        - in: header
          name: If-Match
          required: true
          description: "ETag header value from getCustomer  call"
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/UpdateCustomerBody"
      responses:
        "200":
          $ref: '#/components/responses/UpdateCustomerResponse'
        "400":
          description: "Invalid data supplied"
        "404":
          description: "Customer not found"
    delete:
      tags:
        - "Customers"
      summary: "Delete customer"
      description: "Delete existing customer"
      operationId: deleteCustomer
      responses:
        "204":
          description: "Customer successfully deleted"
        "404":
          description: "Customer not found"

  /customers/{customerId}/contracts:
    parameters:
      - $ref: "#/components/parameters/CustomerIdPathParam"
    get:
      tags:
        - "Contracts"
      summary: "Get contracts list by customer"
      description: "Get contracts list by customer"
      operationId: getContracts
      parameters:
        - $ref: '#/components/parameters/PageNumberQueryParam'
        - $ref: '#/components/parameters/PageSizeQueryParam'
        - $ref: '#/components/parameters/SortQueryParam'
      responses:
        "200":
          $ref: '#/components/responses/ListContractsResponse'
        "404":
          description: "Customer not found"
    post:
      tags:
        - "Contracts"
      summary: "Create contracts for a customer"
      description: "Create contracts for a customer"
      operationId: createContracts
      requestBody:
        $ref: "#/components/requestBodies/CreateContractsBody"
      responses:
        "201":
          $ref: '#/components/responses/ContractsCreationResponse'
        "400":
          description: "Invalid data supplied"
        "404":
          description: "Customer not found"
    delete:
      tags:
        - "Contracts"
      summary: "Delete customer contracts"
      description: "Delete existing customer contracts"
      operationId: deleteContracts
      responses:
        "204":
          description: "Contracts successfully deleted"
        "404":
          description: "Customer not found"
  /contracts/{contractId}:
    parameters:
      - $ref: "#/components/parameters/ContractIdPathParam"
    get:
      tags:
        - "Contracts"
      summary: "Get a contract"
      description: "Get existing contract"
      operationId: getContract
      responses:
        "200":
          $ref: '#/components/responses/GetContractResponse'
        "404":
          description: "contract not found"
    put:
      tags:
        - "Contracts"
      summary: "Update a contract"
      description: "Update existing contract"
      operationId: updateContract
      parameters:
        - in: header
          name: If-Match
          required: true
          description: "ETag header value from getContract  call"
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/UpdateContractBody"
      responses:
        "200":
          $ref: '#/components/responses/UpdateContractResponse'
        "400":
          description: "Invalid data supplied"
        "404":
          description: "Contract not found"
    delete:
      tags:
        - "Contracts"
      summary: "Delete contract"
      description: "Delete existing contract"
      operationId: deleteContract
      responses:
        "204":
          description: "Contract successfully deleted"
        "404":
          description: "Contract not found"

components:
  responses:
    ListCustomersResponse:
      description: Response with list of customers
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ListCustomersResponse'
    CreateCustomerResponse:
      description: Response with created Customer
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Customer'
    UpdateCustomerResponse:
      description: Response with updated customer
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Customer'
    GetCustomerResponse:
      description: Response with existing customer
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Customer'
    ListContractsResponse:
      description: Response with list of contracts per customer
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ListContractsResponse'
    GetContractResponse:
      description: Response with existing contract
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Contract'
    ContractsCreationResponse:
      description: Response with created contracts for a customer
      content:
        application/json:
          schema:
            type: "array"
            items:
              $ref: '#/components/schemas/Contract'
    UpdateContractResponse:
      description: Response with updated contract
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Contract'

  requestBodies:
    CreateCustomerBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateCustomerRequest'
    UpdateCustomerBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateCustomerRequest'
    CreateContractsBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateContractsRequest'
    UpdateContractBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateContractRequest'

  parameters:
    CustomerIdPathParam:
      name: customerId
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/CustomerId'

    CustomerIdQueryParam:
      description: Customer id query parameter
      name: customerId
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/CustomerId'

    ContractIdPathParam:
      name: contractId
      in: path
      required: true
      schema:
        type: "string"

    CustomerFirstNameQueryParam:
      description: Customer first name query parameter
      name: firstName
      in: query
      required: false
      schema:
        type: "string"

    CustomerLastNameQueryParam:
      description: Customer last name query parameter
      name: lastName
      in: query
      required: false
      schema:
        type: "string"

    CustomerIdsQueryParam:
      description: Customers ids query parameter, can be comma-separated list to include multiple values
      name: customerIds
      in: query
      required: false
      schema:
        type: array
        maxItems: 40
        items:
          $ref: "#/components/schemas/CustomerId"

    CustomerSearchQueryParam:
      name: search
      in: query
      description: |
        Provides full text search on Customers.

        Searches in following parameters:
          * id
          * first name
      schema:
        type: string
      required: false

    CustomerCityQueryParam:
      description: Customer city query parameter
      name: city
      in: query
      required: false
      schema:
        type: "string"

    CompanyNameQueryParam:
      description: Company name query parameter
      name: company
      in: query
      required: false
      schema:
        type: "string"

    ProductNumberQueryParam:
      description: Product number query parameter
      name: product
      in: query
      required: false
      schema:
        type: "string"

    PageNumberQueryParam:
      description: Page number, default is 0
      name: pageNumber
      in: query
      schema:
        type: integer
        default: 0
        minimum: 0
      required: false

    PageSizeQueryParam:
      description: Number of items in a page, default page size is 20, maximum 50
      name: pageSize
      in: query
      schema:
        type: integer
        minimum: 0
        maximum: 100
        default: 20
      required: false

    SortQueryParam:
      description: |
        Sort criteria, format: '?sort=&lt;propertyA&gt;[,&lt;propertyB&gt;][,(asc|desc)]',
        sort parameter can be used several times in one query
      name: sort
      in: query
      schema:
        type: string
      required: false

  schemas:
    ListCustomersResponse:
      description: List of customers with paging support
      properties:
        results:
          $ref: '#/components/schemas/CustomersResults'
        paging:
          $ref: '#/components/schemas/Paging'
      required:
        - results
        - paging

    ListContractsResponse:
      description: List of contracts with paging support
      properties:
        results:
          $ref: '#/components/schemas/ContractsResults'
        paging:
          $ref: '#/components/schemas/Paging'
      required:
        - results
        - paging

    CustomersResults:
      type: array
      items:
        $ref: '#/components/schemas/Customer'

    ContractsResults:
      type: array
      items:
        $ref: '#/components/schemas/Contract'

    CreateCustomerRequest:
      type: object
      description: Request to create customer
      allOf:
        - $ref: "#/components/schemas/CustomerDetails"

    UpdateCustomerRequest:
      type: object
      description: Request to update customer
      allOf:
        - $ref: "#/components/schemas/CustomerDetails"

    CreateContractsRequest:
      type: object
      description: Request to create taks for a customer
      properties:
        contracts:
          type: array
          items:
            $ref: '#/components/schemas/ContractDetails'
      required:
        - contracts

    UpdateContractRequest:
      type: object
      description: Request to create taks for a customer
      properties:
        productNumber:
          type: "string"
          description: "Product number of the contract"
      required:
        - productNumber
    
    Customer:
      allOf:
        - type: object
          properties:
            customerId:
              $ref: '#/components/schemas/CustomerId'
        - $ref: '#/components/schemas/CustomerDetails'
        - $ref: '#/components/schemas/Audit'
          title: Customer

    CustomerDetails:
      type: object
      properties:
        firstName:
          type: "string"
          description: "Customer first name"
        lastName:
          type: "string"
          description: "Customer last name"
        street:
          type: "string"
          description: "Customer address Street name"
        streetAdditional:
          type: "string"
          description: "Customer address Street additional information like house number"
        city:
          type: "string"
          description: "Customer address  city (Ort)"
        land:
          type: "string"
          description: "Customer address  country"
        postal:
          type: "string"
          description: "Customer address postal (zip) code"
        email:
          type: "string"
          format: "email"
          description: "Customer email"
        companyName:
          type: "string"
          description: "Customer company"

    Contract:
      allOf:
        - type: object
          properties:
            customerId:
              $ref: '#/components/schemas/CustomerId'
          title: Contract
        - $ref: '#/components/schemas/ContractDetails'
        - $ref: '#/components/schemas/Audit'

    ContractDetails:
      type: object
      properties:
        contractId:
          type: "string"
          description: "Contract id"
        productNumber:
          type: "string"
          description: "Product number of the assigned contract"

    CustomerId:
      type: integer
      format: int64

    Paging:
      type: "object"
      description: "Paging information"
      required:
        - "pageNumber"
        - "pageSize"
        - "pageCount"
        - "totalElements"
      properties:
        pageNumber:
          type: "integer"
          format: "int32"
          description: "Page number, first page is 0"
        pageSize:
          type: "integer"
          format: "int32"
          description: "Number of customers in the page"
        pageCount:
          type: "integer"
          format: "int32"
          description: "Total number of pages"
        totalElements:
          type: "integer"
          format: "int64"
          description: "Total number of elements"
      example:
        pageNumber: 0
        pageSize: 20
        pageCount: 5

    Audit:
      type: object
      properties:
        created:
          description: Date of creation
          type: string
          format: date-time
        lastChange:
          description: Date of last modification
          type: string
          format: date-time
        createdBy:
          type: "string"
          description: "Created by"
        lastChangeBy:
          type: "string"
          description: "Last modified by"

    ### ERROR RESPONSE ###
    ApiErrorResponse:
      description: Representation of an error which occurred on the server
      type: object
      properties:
        traceId:
          description: Trace identifier to easily find error on the server
          type: "string"
        timestamp:
          description: Incident date time
          type: string
          format: 'date-time'
          example: '2023-09-01T09:00:43Z'
        status:
          description: HTTP response code
          type: "integer"
          example: 404
        message:
          description: Basic description of problem
          type: "string"
          example: Some fields are not valid
        details:
          type: array
          items:
            description: Detail information about error
            type: string
        path:
          type: "string"
          description: "Request path"
          example: "/request"
        error:
          type: "string"
          example: FORBIDDEN
        code:
          type: "string"
          description: |
            * `CUSTOMERS_ERR_1401_CUSTOMER_NOT_FOUND` - Customer with the given customer id ({}) is not found.
            * `CUSTOMERS_ERR_1402_CUSTOMER_EMAIL_ALREADY_EXISTS` - Customer with this email or username ({}) already exists.
            * `CUSTOMERS_ERR_1403_CONTRACT_NOT_FOUND` - Contract with the given contract id ({}) is not found.

tags:
  - name: "Customers"
    description: ""
  - name: "Contracts"
    description: ""